// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: cart.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addToCart = `-- name: AddToCart :exec

INSERT INTO user_cart (user_id, product_id, quantity)
VALUES ($1, $2, $3)
`

type AddToCartParams struct {
	UserID    uuid.UUID
	ProductID uuid.UUID
	Quantity  int32
}

func (q *Queries) AddToCart(ctx context.Context, arg AddToCartParams) error {
	_, err := q.db.ExecContext(ctx, addToCart, arg.UserID, arg.ProductID, arg.Quantity)
	return err
}

const deleteFromCartByID = `-- name: DeleteFromCartByID :exec

DELETE FROM user_cart WHERE product_id=$1
`

func (q *Queries) DeleteFromCartByID(ctx context.Context, productID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFromCartByID, productID)
	return err
}

const getUserCart = `-- name: GetUserCart :many
SELECT
    uc.user_id,
    uc.product_id,
    uc.quantity,
    p.name AS product_name,
    p.description AS product_description,
    p.price AS product_price,
    p.image_url as product_image
FROM
    user_cart uc
JOIN
    product p ON uc.product_id = p.id
WHERE
    uc.user_id = $1
`

type GetUserCartRow struct {
	UserID             uuid.UUID
	ProductID          uuid.UUID
	Quantity           int32
	ProductName        string
	ProductDescription string
	ProductPrice       string
	ProductImage       string
}

func (q *Queries) GetUserCart(ctx context.Context, userID uuid.UUID) ([]GetUserCartRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserCart, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserCartRow
	for rows.Next() {
		var i GetUserCartRow
		if err := rows.Scan(
			&i.UserID,
			&i.ProductID,
			&i.Quantity,
			&i.ProductName,
			&i.ProductDescription,
			&i.ProductPrice,
			&i.ProductImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
